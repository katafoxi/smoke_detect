####################################################################################################
# SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.
####################################################################################################


### https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#sink-group

## Конфигурации приложений, не связанные с конкретным компонентом.
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#application-group
application:

  ##(dGPU, Jetson, Boolean) Указывает, включено ли измерение производительности приложения.
  enable-perf-measurement: 1

  ##(dGPU, Jetson, Integer, >0) Интервал в секундах, с которым метрики производительности выбираются и распечатываются.
  perf-measurement-interval-sec: 10

  ##(dGPU, Jetson, String) Путь к существующему каталогу, в котором приложение хранит выходные данные основного детектора в модифицированном формате метаданных KITTI.
  #gie-kitti-output-dir: ­/home/­ubuntu/­kitti_data/

  ##(dGPU, Jetson, String) Путь к существующему каталогу, в котором приложение хранит выходные данные трекера в модифицированном формате метаданных KITTI.
  #kitti-track-output-dir: ­/home/­ubuntu/­kitti_data_tracker/

  ##(dGPU, Jetson, String) Путь к существующему каталогу, в котором приложение хранит выходные данные функции Re-ID трекера. Первое целое число каждой строки — это идентификатор объекта, а остальные числа с плавающей запятой — его вектор признаков.
  #reid-track-output-dir: ­/home/­ubuntu/­reid_data_tracker/

  ##(dGPU, Jetson, String) Путь к существующему каталогу, в котором приложение хранит выходные данные завершенного трекера в модифицированном формате метаданных KITTI.
  #kitti-track-output-dir: ­/home/­ubuntu/­terminated_data_tracker/

  ##(dGPU, Jetson, String) Путь к существующему каталогу, в котором приложение хранит выходные данные состояния теневого трека в модифицированном формате метаданных KITTI.
  #shadow-track-output-dir: ­/home/­ubuntu/­shadow_data_tracker/

  ##(dGPU, Jetson, Integer) При необходимости установите глобальный идентификатор графического процессора для всех компонентов одновременно.
  global-gpu-id: 1



###############################################################################
###############################################################################



## Плиточное отображение в приложении.
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#tiled-display-group
tiled-display:

  ## (dGPU, Jetson, Integer, 0 = disabled, 1 = tiler-enabled 2 = tiler-and-parallel-demux-to-sink-enabled) Указывает, включено ли мозаичное отображение. Когда пользователь устанавливает Enable=2, первая группа [приемника] с ключом: link-to-demux=1 должна быть связана с панелью src_[source_id] демультиплексора, где source_id — это ключ, установленный в соответствующей группе [приемника].
  enable: 0

  ##(dGPU, Jetson, Integer, >0) Количество строк в мозаичном 2D-массиве.
  rows: 1

  ##(dGPU, Jetson, Integer, >0) Количество столбцов в мозаичном 2D-массиве.
  columns: 1

  ##(dGPU, Jetson, Integer, >0) Ширина мозаичного 2D-массива в пикселях.
  width: 1280

  ##(dGPU, Jetson, Integer, >0) Высота мозаичного 2D-массива в пикселях.
  height: 720

  ##(dGPU, Integer, ≥0) Графический процессор, который будет использоваться элементом в случае нескольких графических процессоров.
  #gpu-id: 0

  ##(dGPU, Jetson, Integer, 0, 1, 2, or 3) Тип памяти, которую элемент должен выделить для выходных буферов.
  # 0 (nvbuf-mem-default): тип по умолчанию, зависящий от платформы.
  # 1 (nvbuf-mem-cuda-pinned): закрепленная/хостовая память CUDA
  # 2 (nvbuf-mem-cuda-device): память CUDA устройства.
  # 3 (nvbuf-mem-cuda-unified): унифицированная память CUDA.
  # Для dGPU: все значения действительны.
  # Для Jetson: допустимо только 0 (ноль).
  nvbuf-memory-type: 0

  ##(Jetson, Integer: 0-2) Вычислить аппаратное обеспечение масштабирования для использования. Применимо только для Jetson. Системы dGPU по умолчанию используют графический процессор.
  # 0 (Default): Default, GPU for Tesla, VIC for Jetson
  # 1 (GPU): GPU
  # 2 (VIC): VIC
  compute-hw: 2

  ##(dGPU, Jetson, Boolean) Включите автоматическое разбиение квадратов в зависимости от количества источников. Плитки размещаются последовательно на сетке с пустыми плитками в конце.
  square-seq-grid: 0



###############################################################################
###############################################################################



## Свойства источника. Источников может быть несколько. Группы должны быть названы как: [source0], [source1] …
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#source-group
source:
  #Был в примере
  #csv-file-path: sources_1.csv

  ##(dGPU, Jetson, Boolean) Включает или отключает источник.
  enable: 1

  ##(dGPU, Jetson, Integer, 1, 2, 3, 4, or 5) Тип источника; остальные свойства источника зависят от этого типа.
  # 1: Camera (V4L2)
  # 2: URI
  # 3: MultiURI
  # 4: RTSP
  # 5: Camera (CSI) (Jetson only)
  type: 2


  ##(dGPU, Jetson, String) URI закодированного потока. URI может быть файлом, URI HTTP или живым источником RTSP. Допустимо, если тип = 2 или 3. При использовании MultiURI спецификатор формата %d также можно использовать для указания нескольких источников. Приложение выполняет итерацию от 0 до num-sources-1, чтобы сгенерировать фактические URI.
  # uri: file:///home/ubuntu/source.mp4 
  # uri: http://127.0.0.1/source.mp4 
  # uri: rtsp://127.0.0.1/source1 
  # uri: file:///home/ubuntu/source_%d.mp4
  uri: file://../../streams/sample_1080p_h264.mp4

  ##(dGPU, Jetson, Integer, ≥0) Количество источников. Действует только тогда, когда тип = 3.
  num-sources: 1

  ##(dGPU, Integer, 0, 1, or 2) Тип элемента памяти CUDA, используемый для выделения выходных буферов для источника типа 2, 3 или 4. Неприменимо для источника CSI или USB-камеры.
  # 0 (memtype_device): Память устройства, выделенная cudaMalloc().
  # 1 (memtype_pinned): хост/закрепленная память, выделенная с помощью cudaMallocHost().
  # 2 (memtype_unified): Единая память, выделенная cudaMallocManaged().
  cudadec-memtype: 0

  ##(dGPU, Jetson, Boolean) Включает или отключает декодирование только внутри.
  intra-decode-enable: 1

  ##(dGPU, Jetson, Integer, ≥0 and ≤24) Количество поверхностей в дополнение к минимальным поверхностям декодирования, заданным декодером. Может использоваться для управления количеством выходных буферов декодера в конвейере.
  #num-extra-surfaces: 5

  ##(dGPU, Integer, ≥0) Графический процессор, который будет использоваться элементом в случае нескольких графических процессоров.
  #gpu-id: 1

  ##(dGPU, Jetson, Integer, ≥0) Уникальный идентификатор источника входных данных, который будет добавлен в метаданные. (Необязательный)
  #camera-id: 2

  ##(dGPU, Jetson, Integer, >0) Ширина кадров, запрашиваемых с камеры, в пикселях. Действительно, когда тип = 1 или 5.
  camera-width: 1920

  ##(dGPU, Jetson, Integer, >0) Высота кадров, запрашиваемых с камеры, в пикселях. Действительно, когда тип = 1 или 5.
  camera-height: 1080

  ##(dGPU, Jetson, Integer, >0) Числитель — часть дроби, определяющая частоту кадров, запрошенную камерой, в кадрах/сек. Действительно, когда тип = 1 или 5.
  camera-fps-n: 30

  ##(dGPU, Jetson, Integer, >0) Знаменатель — часть дроби, определяющая частоту кадров, запрашиваемую у камеры, в кадрах/сек. Действительно, когда тип = 1 или 5.
  camera-fps-d: 1

  ##(dGPU, Jetson, Integer, >0) Номер узла устройства V4L2. Например, /dev/video<num> для пути захвата камеры V4L2 с открытым исходным кодом. Действительно, когда настройка типа (тип источника) равна 1.
  camera-v4l2-dev-node: 1

  ##(dGPU, Jetson, Integer, ≥0) Размер джиттербуфера в миллисекундах; применимо только для потоков RTSP.
  #latency: 200

  ##(Jetson, Integer, ≥0) Идентификатор датчика модуля камеры. Действительно, когда тип (тип источника) равен 5.
  camera-csi-sensor-id: 1

  ##(dGPU, Jetson,Integer,) Интервал для пропуска кадров. Например, 5 означает, что декодер выводит каждый пятый кадр; 0 означает, что кадры не удаляются.
  drop-frame-interval: 2


  ##(dGPU, Jetson, Integer, 0 or 4) Транспортный протокол, используемый для RTP. Действительно, когда тип (тип источника) равен 4.
  # 0: UDP + UDP Multicast + TCP
  # 4: TCP only
  select-rtp-protocol: 4

  ##(dGPU, Jetson, Integer, ≥0) Таймаут в секундах ожидания с момента получения последних данных от источника RTSP перед принудительным повторным подключением. Установка значения 0 отключит повторное подключение. Действительно, когда тип (тип источника) равен 4.
  #rtsp-reconnect-interval-sec: 60

  ##(Integer, ≥-1) Максимальное количество попыток повторного подключения. Установка значения -1 означает, что попытки повторного подключения будут предприниматься бесконечно. Допустимо, если тип источника равен 4, а rtsp-reconnect-interval-sec — ненулевое положительное значение.
  #rtsp-reconnect-attempts: 2

  ##(dGPU, Jetson, Integer, 0, 1 or 2) Способы запуска смарт-записи.
  # 0: Disable
  # 1: Только через облачные сообщения
  # 2: Cloud message + Local events
  smart-record: 0

  ##(dGPU, Jetson, String) Путь к каталогу для сохранения записанного файла. По умолчанию используется текущий каталог.
  #smart-rec-dir-path: /home/nvidia/

  ##(dGPU, Jetson, String) Префикс имени файла для записанного видео. По умолчанию Smart_Record является префиксом. Для уникальных имен файлов каждый источник должен иметь уникальный префикс.
  #smart-rec-file-prefix: Cam1

  ##(dGPU, Jetson, Integer, ≥0) Размер кэша смарт-записей в секундах.
  #smart-rec-cache: 20

  ##(dGPU, Jetson, Integer, 0 or 1) Формат контейнера записываемого видео. Поддерживаются контейнеры MP4 и MKV.
  #smart-rec-container: 0

  ##(dGPU, Jetson, Integer, ≥0) Количество секунд до начала записи. Например. если t0 — текущее время, а N — время начала в секундах, это означает, что запись начнется с t0 – N. Очевидно, что для того, чтобы это работало, размер видеокэша должен быть больше, чем N.
  #smart-rec-start-time: 5

  ##(dGPU, Jetson, Integer, ≥0) В случае, если событие Stop не генерируется. Этот параметр гарантирует остановку записи по истечении заданной по умолчанию продолжительности.
  #smart-rec-default-duration: 20

  ##(dGPU, Jetson, Integer, ≥0) Продолжительность записи в секундах.
  #smart-rec-duration: 15

  ##(dGPU, Jetson, Integer, ≥0) Это временной интервал в секундах для генерации событий запуска/остановки SR.
  #smart-rec-interval: 10

  ##(dGPU, Jetson, Integer, ≥0) Размер UDP-буфера в байтах для источников RTSP.
  #udp-buffer-size: 2000000

  ##(dGPU, Jetson, String: NV12, I420, P010_10LE, BGRx, RGBA) Выходной видеоформат для источника. Это значение устанавливается в качестве выходного формата элемента nvvideoconvert для источника.
  #video-format: RGBA

  ##(dGPU,Jetson, Integer, 0, 1, 2, or 3) Тип памяти CUDA, которую элемент должен выделить для выходных буферов nvvideoconvert, что полезно для источника типа 1.
  # 0 (nvbuf-mem-default, a platform-specific default
  # 1 (nvbuf-mem-cuda-pinned): pinned/host CUDA memory.
  # 2 (nvbuf-mem-cuda-device): Device CUDA memory.
  # 3 (nvbuf-mem-cuda-unified): Unified CUDA memory.
  # For dGPU: All values are valid.
  # For Jetson: Only 0 (zero) is valid.
  nvbuf-memory-type: 0



###############################################################################
###############################################################################



## Укажите свойства и измените поведение компонентов приемника, которые представляют выходные данные, такие как дисплеи и файлы для рендеринга, кодирования и сохранения файлов. Конвейер может содержать несколько приемников.
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#sink-group
sink0:
  enable: 1
  #Type - 1=FakeSink 2=EglSink/nv3dsink (Jetson only) 3=File
  type: 2
  sync: 1
  source-id: 0
  gpu-id: 0
  nvbuf-memory-type: 0

##(dGPU, Jetson, Boolean) Включает или отключает приемник.
enable: 1

##(dGPU, Jetson, Integer, 1, 2, 3, 4, 5 or 6) Тип раковины, которую следует использовать.
# 1: Фейксинк
# 2: Оконный nveglglessink на основе EGL для dGPU и nv3dsink для Jetson
# 3: Кодирование + сохранение файла (кодер + мультиплексор + файловый приемник)
# 4: Кодирование + потоковая передача RTSP; Примечание. sync=1 для этого типа неприменим;
# 5: nvdrmvideosink (только Jetson)
# 6: Конвертер сообщений + брокер сообщений
type: 2

##(dGPU, Jetson, Integer, 0 or 1) Указывает, насколько быстро должен обрабатываться поток.
# 0: Как можно быстрее
# 1: Синхронно
sync: 0

##(dGPU, Jetson, Boolean) Указывает, должен ли приемник генерировать события качества обслуживания, которые могут привести к пропуску кадров конвейера, если FPS конвейера не соответствует частоте кадров потока.
qos: 0

?
##(dGPU, Jetson, Integer, ≥0) Идентификатор источника, буферы которого должен использовать этот приемник. Идентификатор источника содержится в имени группы источников. Например, для группы [source1] source-id=1.
source-id: 1

##(dGPU, Integer, ≥0) Графический процессор, который будет использоваться элементом в случае нескольких графических процессоров.
#gpu-id: 1

##(dGPU, Jetson, Integer, 1 or 2) Контейнер, используемый для сохранения файла. Действительно только для типа = 3.
# 1: MP4
# 2: MKV
container: 1

##(dGPU, Jetson, Integer, 1 or 2) Кодировщик, который будет использоваться для сохранения файла.
# 1: H.264 (hardware)
# 2: H.265 (hardware)
codec: 1

##(dGPU, Jetson, Integer, >0) Битрейт, используемый для кодирования, в битах в секунду. Действительно для типа = 3 и 4.
bitrate: 4000000

##(dGPU, Jetson, Integer, 0≤iv≤MAX_INT) Частота появления внутрикадра кодирования.
#iframeinterval: 30

##(dGPU, Jetson, String) Путь к выходному закодированному файлу. Действительно только для типа = 3.
#output-file: ­/home/­ubuntu/­output.mp4

##(dGPU, Jetson, Integer, 0, 1, 2, or 3) Тип памяти CUDA, которую плагин должен выделить для выходных буферов.
# 0 (nvbuf-mem-default): a platform-specific default
# 1 (nvbuf-mem-cuda-pinned): pinned/host CUDA memory
# 2 (nvbuf-mem-cuda-device): Device CUDA memory
# 3 (nvbuf-mem-cuda-unified): Unified CUDA memory
# For dGPU: All values are valid.
# For Jetson: Only 0 (zero) Is valid.
nvbuf-memory-type: 0

##(dGPU, Jetson, Integer) Порт для сервера потоковой передачи RTSP; действительный неиспользуемый номер порта. Действительно для типа = 4.
#rtsp-port: 8554

##(dGPU, Jetson, Integer) Порт, используемый внутри реализации потоковой передачи — действительный неиспользуемый номер порта. Действительно для типа = 4.
udp-port: 5400

##(Jetson, Integer, >=1) Индекс соединения. Действительно для nvdrmvideosink(type=5).
conn-id: 0

##(dGPU, Jetson, Integer, >=1) Ширина рендерера в пикселях.
width: 1920

##(dGPU, Jetson, Integer, >=1) Высота рендерера в пикселях.
height: 1920

##(dGPU, Jetson, Integer, >=1) Горизонтальное смещение окна рендеринга в пикселях.
offset-x: 100

##(dGPU, Jetson, Integer, >=1) Вертикальное смещение окна рендеринга в пикселях.
offset-y: 100

##(Jetson, Integer, ≥0) Плоскость, на которой должно отображаться видео. Действительно для nvdrmvideosink(type=5).
plane-id: 0

##(dGPU, Jetson, String) Путь к файлу конфигурации для элемента Gst-nvmsgconv (тип = 6).
#msg-conv-config: dstest5_msgconv_sample_config.txt

##(dGPU, Jetson, String) Путь к реализации адаптера протокола использует Gst-nvmsgbroker (тип = 6).
#msg-broker-proto-lib: /opt/nvidia/deepstream/deepstream-5.0/lib/libnvds_amqp_proto.so

##(dGPU, Jetson, String) Строка подключения внутреннего сервера (тип=6).
#msg-broker-conn-str: foo.bar.com;80;dsapp

##(dGPU, Jetson, String) Название темы сообщения (тип=6).
#topic: test-ds4

##(dGPU, Jetson, Integer 0, 1, 256, or 257) Тип полезной нагрузки.
# 0, PAYLOAD_DEEPSTREAM: Полезная нагрузка схемы DeepStream.
# 1, PAYLOAD_DEEPSTREAM_-MINIMAL: Полезная нагрузка схемы DeepStream минимальна.
# 256, PAYLOAD_RESERVED: Reserved type.
# 257, PAYLOAD_CUSTOM: Custom schema payload (type=6).
msg-conv-payload-type: 0

##(dGPU, Jetson, String) Путь к дополнительному файлу конфигурации для элемента Gst-nvmsgbroker (тип = 6).
#msg-broker-config: /home/ubuntu/cfg_amqp.txt

##(dGPU Jetson) Время сна между последовательными вызовами do_work в миллисекундах
#Целое число >= 0. Для Azure используйте значение >= 10 в зависимости от ограничения скорости сообщений уровня службы Центра Интернета вещей. Предупреждение: сбой возможен при неоправданно большом времени сна, например. 10000000 мс
sleep-time: 10

##(dGPU, Jetson, Integer) используйте API-интерфейс библиотеки адаптера протокола напрямую или используйте новый API-интерфейс оболочки библиотеки msgbroker (тип = 6)
# 0 : Use adapter api’s directly
# 1 : msgbroker lib wrapper api’s
#new-api: 0

##(dGPU, Jetson, String) Абсолютный путь к дополнительной пользовательской библиотеке создания полезных данных. Эта библиотека реализует API, определенный в source/libs/nvmsgconv/nvmsgconv.h. Применимо только в том случае, если msg-conv-payload-type=257, PAYLOAD_CUSTOM. (тип=6)
#msg-conv-msg2p-lib: /opt/nvidia/deepstream/deepstream-4.0/lib/libnvds_msgconv.so

##(dGPU, Jetson, Integer, >=0) свойство comp-id Gst элемента nvmsgconv; Идентификатор (gie-unique-id) первичного/вторичного компонента gie, из которого должны обрабатываться метаданные. (тип=6)
#msg-conv-comp-id: 1

##(dGPU, Jetson, Integer, >=0) свойство comp-id Gst элемента nvmsgbroker; Идентификатор (gie-unique-id) первичного/вторичного компонента gie, из которого должны обрабатываться метаданные. (тип=6)
#msg-broker-comp-id: 1

##(dGPU Jetson, String) Каталог для дампа полезных данных (тип = 6)
#debug-payload-dir:<absolute path> #Default is NULL

##(“dGPU Jetson”, Boolean) Создать несколько полезных данных сообщения (тип = 6)
#multiple-payloads: 1 #(Default is 0)

##(“dGPU Jetson”, Boolean) Генерация полезных данных с использованием метаданных кадра/объекта буфера Gst (тип = 6).
#msg-conv-msg2p-new-api: 1 #(Default is 0)

##(dGPU Jetson, Integer, 1 to 4,294,967,295) Интервал кадров, в котором генерируется полезная нагрузка (тип = 6)
msg-conv-frame-interval: 25 #(Default is 30)

##(dGPU, Jetson, Integer,) Добавляйте только компонент брокера сообщений вместо конвертера сообщений + брокера сообщений. (тип=6)
#disable-msgconv: 1

##(dGPU, Jetson, Integer, 0 or 1) Движок, используемый для кодировщика
# 0: NVENC hardware engine
# 1: CPU software encoder
enc-type: 0

##(dGPU, Jetson, Integer, valid values from the column beside) Профиль кодера для кодека V4L2 H264 (HW):
# 0: Baseline
# 2: Main
# 4: High
# ##V4L2 H265 encoder(HW):
# 0: Main
# 1: Main10
profile: 2

##(dGPU, Jetson, Integer, >=0) Размер буфера ядра UDP (в байтах) для внутреннего выходного конвейера RTSP.
#udp-buffer-size: 100000

##(dGPU, Jetson, Boolean) Логическое значение, которое включает или отключает потоковую передачу только определенного «идентификатора источника» в этот приемник. Пожалуйста, проверьте кнопку включения группы мозаичного отображения для получения дополнительной информации.
link-to-demux: 0



sink1:
  enable: 0
  type: 3
  #1=mp4 2=mkv
  container: 1
  #1=h264 2=h265
  codec: 1
  #encoder type 0=Hardware 1=Software
  enc-type: 0
  sync: 0
  #iframeinterval=10
  bitrate: 2000000
  #H264 Profile - 0=Baseline 2=Main 4=High
  #H265 Profile - 0=Main 1=Main10
  # set profile only for hw encoder, sw encoder selects profile based on sw-preset
  profile: 0
  output-file: out.mp4
  source-id: 1

sink2:
  enable: 0
  #Type - 1=FakeSink 2=EglSink 3=File 4=RTSPStreaming
  type: 4
  #1=h264 2=h265
  codec: 1
  #encoder type 0=Hardware 1=Software
  enc-type: 0
  sync: 0
  bitrate: 4000000
  #H264 Profile - 0=Baseline 2=Main 4=High
  #H265 Profile - 0=Main 1=Main10
  # set profile only for hw encoder, sw encoder selects profile based on sw-preset
  profile: 0
  # set below properties in case of RTSPStreaming
  rtsp-port: 8554
  udp-port: 5400



###############################################################################
###############################################################################



## Укажите свойства и измените компонент экранного меню (OSD), который накладывает текст и прямоугольники на рамку.
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#osd-group
osd:
  ## (Boolean) Enables or disables the On-Screen Display (OSD).
  enable: 1

  ## (Integer, ≥0) Графический процессор, который будет использоваться элементом в случае нескольких графических процессоров.
  gpu-id: 0

  ## (Integer, ≥0) Ширина границ ограничивающих рамок, нарисованных для объектов, в пикселях.
  border-width: 1

  ## (R;G;B;A Float, 0≤R,G,B,A≤1 )Цвет границ ограничивающих рамок, нарисованных для объектов.
  border-color: 0;0;0.7;1 #Dark Blue

  ## (Integer, ≥0) Размер текста, описывающего объекты, в пунктах.
  text-size: 15

  ## (R;G;B;A Float, 0≤R,G,B,A≤1)Цвет текста, описывающего объекты, в формате RGBA.
  text-color: 0;0;0.7;1 #Dark Blue

  ## (R;G;B;A Float, 0≤R,G,B,A≤1) Цвет фона текста, описывающего объекты, в формате RGBA.
  text-bg-color: 0;0;0;0.5 #Semi-transparent black

  ## (Integer, >0) Размер текста времени на часах, в пунктах.
  clock-text-size: 12

  ## (Integer, >0) Горизонтальное смещение текста времени на часах в пикселях.
  clock-x-offset: 100

  ## (Integer, >0) Вертикальное смещение текста времени на часах в пикселях.
  clock-y-offset: 100

  ## (String) Имя шрифта текста, описывающего объекты. Введите команду оболочки fc-list, чтобы отобразить имена доступных шрифтов.
  font: Serif

  ## (R;G;B;A Float, 0≤R,G,B,A≤1) Цвет текста времени на часах в формате RGBA.
  clock-color: 1;0;0;1 #Red

  ## (Integer, 0, 1, 2, or 3) Тип памяти CUDA, которую элемент должен выделить для выходных буферов.
  # 0 (nvbuf-mem-default): a platform-specific default
  # 1 (nvbuf-mem-cuda-pinned): pinned/host CUDA memory
  # 2 (nvbuf-mem-cuda-device): Device CUDA memory
  # 3 (nvbuf-mem-cuda-unified): Unified CUDA memory
  # For dGPU: All values are valid.
  # For Jetson: Only 0 (zero) is valid.
  nvbuf-memory-type: 0

  ##(Integer, 0, 1, or 2) Режим обработки NvOSD.
  # 0: CPU
  # 1: GPU
  process-mode: 1

  ## (Boolean) Укажите, отображать ли текст
  display-text: 1

  ##(Boolean) Укажите, следует ли использовать ограничительную рамку
  display-bbox: 0

  ## (Boolean) Укажите, отображать ли маску экземпляра
  display-mask: 1



###############################################################################
###############################################################################



## Плагин Gst-nvstreammux формирует пакет кадров из нескольких источников входных данных. 
## Укажите свойства и измените поведение компонента streammux.
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvstreammux.html
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#streammux-group
streammux:

  ##(dGPU, Integer, ≥0) GPU element is to use in case of multiple GPUs.
  gpu-id: 0

  ## (Boolean) Сообщает мультиплексору, что источники активны.
  live-source: 0

  ##(Integer, >0) Количество буферов в пуле выходных буферов мультиплексора.
  buffer-pool-size: 4

  ## (Integer, >0) Размер партии мультиплексора.
  batch-size: 1

  ## (Integer, ≥−1) Тайм-аут в микросекундах после отправки пакета после того, как будет доступен первый буфер, даже если полный пакет не сформирован.
  batched-push-timeout: 40000

  ##(Integer, >0) Выходная ширина мультиплексора в пикселях.
  width: 1280

  ##(Integer, >0) Высота вывода мультиплексора в пикселях.
  height: 720

  ##(Boolean) Указывает, следует ли сохранять исходное соотношение сторон при масштабировании путем добавления черных полос.
  enable-padding: 0

  ##(Integer, 0, 1, 2, or 3) Тип памяти CUDA, которую элемент должен выделить для выходных буферов.
  # 0 (nvbuf-mem-default, значение по умолчанию для конкретной платформы).
  # 1 (nvbuf-mem-cuda-pinned): закрепленная/хостовая память CUDA.
  # 2 (nvbuf-mem-cuda-device): память CUDA устройства.
  # 3 (nvbuf-mem-cuda-unified): унифицированная память CUDA.
  # Для dGPU: все значения действительны.
  # Для Jetson: допустимо только 0 (ноль).
  nvbuf-memory-type: 0

  ##(dGPU, Boolean)Для живых источников мультиплексированный буфер должен иметь связанный NvDsFrameMeta->ntp_timestamp, установленный на системное время или время NTP сервера при потоковой передаче RTSP. 
  ## Если установлено значение 1, системная временная метка будет прикреплена как временная метка ntp.
  ## Если установлено значение 0, будет прикреплена временная метка ntp из rtspsrc, если она доступна.
  attach-sys-ts-as-ntp: 0

  ##(String) Этот ключ действителен только для нового потокового мультиплексора. Для получения дополнительной информации обратитесь к разделу руководства по плагину «Новый Gst-nvstreammux». Абсолютный или относительный (к расположению файла конфигурации DS) путь к файлу конфигурации мультиплексора.
  #config-file-path: config_mux_source30.txt

  ##(Boolean) Синхронизируйте входные кадры по времени перед их группировкой.
  sync-inputs: 0 # (default 0)

  ##(Integer, ≥0) Дополнительная задержка в режиме реального времени, позволяющая восходящему потоку создавать буферы для текущей позиции дольше (в наносекундах).
  max-latency: 0 #(default 0)

  ##(Boolean) Логическое свойство для управления распространением EOS в нисходящем направлении от nvstreammux, когда все площадки приемника находятся в состоянии EOS. (Экспериментальный)
  drop-pipeline-eos: 0 #(default 0)



###############################################################################
###############################################################################



## Укажите свойства и измените поведение первичного GIE. 
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#primary-gie-and-secondary-gie-group
# Свойство config-file является обязательным для любого раздела gie.
# Другие свойства являются необязательными, и если они установлены, они переопределяют свойства, установленные в
# выводной файл конфигурации.
# https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#id8
primary-gie:

  ##(dGPU, Jetson Both GIEs, Boolean) Указывает, должен ли быть включен основной GIE.
  enable: 1

  ##(Both, Integer, >0) Уникальный идентификатор компонента, который будет присвоен экземпляру nvinfer. Используется для идентификации метаданных, созданных экземпляром.
  gie-unique-id: 1

  ##(dGPU, Both GIEs, Integer, ≥0) Графический процессор, который будет использоваться элементом в случае нескольких графических процессоров.
  gpu-id: 0

  ## (Both GIEs, String) Абсолютный путь к предварительно созданному сериализованному файлу ядра для режима.
  model-engine-file: ../../models/Primary_Detector/current_model.onnx_b2_gpu0_fp16.engine

  ## (dGPU, Jetson Primary GIE, Integer, 0, 1, 2, or 3) Тип элемента памяти CUDA предназначен для выделения выходных буферов.
  # 0 (nvbuf-mem-default): значение по умолчанию, зависящее от платформы.
  # 1 (nvbuf-mem-cuda-pinned): закрепленная/хостовая память CUDA
  # 2 (nvbuf-mem-cuda-device): память CUDA устройства.
  # 3 (nvbuf-mem-cuda-unified): унифицированная память CUDA.
  # Для dGPU: все значения действительны.
  # Для Jetson: допустимо только 0 (ноль).
  nvbuf-memory-type: 0

  ##(dGPU, Jetson Both GIEs, String) Путь к файлу конфигурации, в котором указаны свойства плагина Gst-nvinfer. Он может содержать любые свойства, описанные в этой таблице, кроме самого конфигурационного файла. Свойства должны быть определены в группе с именем [property]. Более подробную информацию о параметрах см. в разделе «Спецификации конфигурации файла Gst-nvinfer» в Руководстве по плагину DeepStream 4.0.
  #For complete examples, see the sample file samples/configs/-deepstream-app/-config_infer_resnet.txt or the deepstream-test2 sample application.
  config-file: config_infer_primary_desc.yml

  ## (dGPU, Jetson Both GIEs, Integer, >0 Integer, >0) Количество кадров (P.GIE)/объектов (S.GIE), которые должны быть выведены вместе в пакете.
  batch-size: 1

  ##(dGPU, Jetson Primary GIE, Integer, >0 Integer, >0) Количество последовательных пакетов, которые нужно пропустить для вывода.
  interval: 2

  ## (dGPU, Jetson Both GIEs, R:G:B:A Float, 0≤R,G,B,A≤1) Цвет границ объектов определенного идентификатора класса, заданного в формате RGBA. Ключ должен иметь формат bbox-border-color<class-id>. Это свойство может быть идентифицировано несколько раз для нескольких идентификаторов классов. Если это свойство не указано для идентификатора класса, границы для объектов с этим идентификатором класса не рисуются.
  bbox-border-color0: 1;0;0;1 #(Red for class-id 2)
  # bbox-border-color1: 0;1;1;1
  # bbox-border-color2: 0;0;1;1
  # bbox-border-color3: 0;1;0;1

  ##(dGPU, Jetson Both GIEs, R:G:B:A Float, 0≤R,G,B,A≤1) Цвет прямоугольников, нарисованных над объектами определенного идентификатора класса, в формате RGBA. Ключ должен иметь формат bbox-bg-color<class-id>. Это свойство можно использовать несколько раз для нескольких идентификаторов классов. Если он не используется для идентификатора класса, поля для объектов этого идентификатора класса не рисуются.
  bbox-bg-color0: -0;1;0;0.3 #(Semi-transparent green for class-id 0)

  ##(dGPU, Jetson Secondary GIE, Integer, >0) Уникальный идентификатор GIE, с метаданными которого (NvDsFrameMeta) этот GIE должен работать.
  operate-on-gie-id: 1

  ##(dGPU, Jetson Secondary GIE, Semicolon separated integer array) Идентификаторы классов родительского GIE, на которых должен работать этот GIE. Родительский GIE указывается с использованием идентификатора операции-на-гие.
  operate-on-class-ids: 1;2  # (работает с объектами с идентификаторами классов 1, 2, сгенерированными родительским GIE)

  ##(dGPU, Jetson Both GIEs, String) Путь к существующему каталогу, в который можно сбросить необработанное содержимое буфера вывода в файл.
  infer-raw-output-dir: ­/home/­ubuntu/­infer_raw_out

  ##(dGPU, Jetson Both GIEs, String) Путь к файлу метки.
  labelfile-path: ../../models/Primary_Detector/labels.txt

  ##(dGPU, Jetson Both GIEs, Integer, 0 or 1) Плагин для использования для вывода. 0:nvinfer (TensorRT) 1:nvinferserver (сервер вывода Triton)
  plugin-type: 0

  ##(dGPU, Jetson, Primary GIE, Integer, 0 or 1) Используйте предварительно обработанные входные тензоры, прикрепленные в качестве метаданных плагином nvdspreprocess, вместо предварительной обработки внутри nvinfer.
  input-tensor-meta: 1



###############################################################################
###############################################################################



## Диагностика и отладка. Эта группа является экспериментальной.
## https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_ref_app_deepstream.html#tests-group
tests:
  file-loop: 0
